# -*- coding: utf-8 -*-
"""attractors_catalog.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PXw1VqZ8RMDyCyix21GBOOHXKkF-i99u

**Requrements**
"""

# !pip install plotly
import numpy as np
import math as m
import matplotlib.pyplot as plt
import plotly.graph_objects as go

"""**Clifford Attractor (2D)**"""

def clifford2D(x, y, steps=100000, discard=1000):
    #Params
    a, b, c, d = -2, -2.4, 1.1, -0.9
    #Evolution
    xs = np.empty(steps)
    ys = np.empty(steps)

    for i in range(steps):
        x, y = np.sin(a*y) + c*np.cos(a*x), np.sin(b*x) + d*np.cos(b*y)
        xs[i], ys[i] = x, y

    return xs[discard:], ys[discard:]

# Run example
xs, ys = clifford2D(0.1, 0.1)

# plt.figure(figsize=(6,6))
# plt.scatter(xs, ys,s=0.1, color="blue", alpha=0.1)
# plt.axis("equal")
# plt.show()


fig = go.Figure(data=[go.Scatter(
    x=xs, y=ys,
    mode='markers',
    marker=dict(
        size=0.5,
        color=np.linspace(0, 1, len(xs)),
        colorscale='Turbo'
    )
)])

fig.update_layout(
    width=700, height=700,
    xaxis=dict(showgrid=False, zeroline=False),
    yaxis=dict(showgrid=False, zeroline=False),
)
fig.show()

"""Thinkerbell Attractor (2D)"""

def thinkerbell2D(x, y, steps=100000, discard=1000):
    # Params
    a, b, c, d = 0.9, -0.6013, 2, 0.5
    # Evolution
    xs = np.empty(steps)
    ys = np.empty(steps)

    for i in range(steps):
        x, y = x*x - y*y + a*x + b*y, 2*x*y + c*x + d*y
        xs[i], ys[i] = x, y

    return xs[discard:], ys[discard:]

# Run example
xs, ys = thinkerbell2D(-0.72, -0.64)

# plt.figure(figsize=(6,6))
# plt.scatter(xs, ys, s=0.1, color="blue", alpha=0.1)
# plt.axis("equal")
# plt.show()

fig = go.Figure(data=[go.Scatter(
    x=xs, y=ys,
    mode='markers',
    marker=dict(
        size=0.5,
        color=np.linspace(0, 1, len(xs)),
        colorscale='inferno'
    )
)])

fig.update_layout(
    width=700, height=700,
    xaxis=dict(showgrid=False, zeroline=False),
    yaxis=dict(showgrid=False, zeroline=False),
)
fig.show()

"""Quadratic Strange Attractor (2D)"""

def quadratic2D(x, y, steps=100000, discard=1000):
    # Params
    a0, a1, a2, a3, a4, a5  = -1.0, 0.9, 0.4, -0.2, -0.6, -0.5
    a6, a7, a8, a9, a10, a11 =  0.4, 0.7, 0.3, -0.5, 0.7, -0.8


    # Evolution
    xs = np.empty(steps)
    ys = np.empty(steps)

    for i in range(steps):
        new_x = a0 + a1*x + a2*x*x + a3*x*y + a4*y + a5*y*y
        new_y = a6 + a7*x + a8*x*x + a9*x*y + a10*y + a11*y*y
        x, y = new_x, new_y
        xs[i], ys[i] = x, y

    return xs[discard:], ys[discard:]

# Run example
xs, ys = quadratic2D(0.1, 0.1)

# plt.figure(figsize=(6,6))
# plt.scatter(xs, ys, s=0.1, color="purple", alpha=0.1)
# plt.axis("equal")
# plt.show()


fig = go.Figure(data=[go.Scatter(
    x=xs, y=ys,
    mode='markers',
    marker=dict(
        size=0.5,
        color=np.linspace(0, 1, len(xs)),
        colorscale='viridis'
    )
)])

fig.update_layout(
    width=700, height=700,
    xaxis=dict(showgrid=False, zeroline=False),
    yaxis=dict(showgrid=False, zeroline=False),
)
fig.show()

"""Lorenz Attractor(3D)"""

def lorenz3D(x, y, z, steps=100000, discard=1000, dt=0.01):
    # Params
    sigma, rho, beta = 10.0, 28.0, 8/3

    # Evolution
    xs = np.empty(steps)
    ys = np.empty(steps)
    zs = np.empty(steps)

    for i in range(steps):
        dx = sigma * (y - x)
        dy = -x*z + rho*x - y
        dz = x*y - beta*z

        x += dx * dt
        y += dy * dt
        z += dz * dt

        xs[i], ys[i], zs[i] = x, y, z

    return xs[discard:], ys[discard:], zs[discard:]

# Run example
xs, ys, zs = lorenz3D(0.1, 0.0, 0.0, steps=50000)

# Plotly 3D line plot
fig = go.Figure(data=[go.Scatter3d(
    x=xs, y=ys, z=zs,
    mode='lines',
    line=dict(
        color=np.linspace(0, 1, len(xs)),  # gradient
        colorscale='Plasma',                # choose palette
        width=0.5
    )
)])

fig.update_layout(
    scene=dict(
        xaxis_title="X",
        yaxis_title="Y",
        zaxis_title="Z"
    ),
    width=700, height=700
)

fig.show()

"""Sprott Attractor (3D)"""

def sprott3D(x, y, z, steps=100000, discard=1000, dt=0.01):
    # Params
    a, b = 2.07, 1.79

    # Evolution arrays
    xs = np.empty(steps)
    ys = np.empty(steps)
    zs = np.empty(steps)

    for i in range(steps):
        dx = y + a * x * y + x * z
        dy = 1 - b * x**2 + y * z
        dz = x - x**2 - y**2

        x += dx * dt
        y += dy * dt
        z += dz * dt

        xs[i], ys[i], zs[i] = x, y, z

    return xs[discard:], ys[discard:], zs[discard:]

# Run example
xs, ys, zs = sprott3D(0.1, 0.1, 0.1, steps=50000)

# Plotly 3D line plot
fig = go.Figure(data=[go.Scatter3d(
    x=xs, y=ys, z=zs,
    mode='lines',
    line=dict(
        color=np.linspace(0, 1, len(xs)),  # gradient coloring
        colorscale='Plasma',
        width=0.5
    )
)])

fig.update_layout(
    scene=dict(
        xaxis_title="X",
        yaxis_title="Y",
        zaxis_title="Z"
    ),
    width=700, height=700
)

fig.show()